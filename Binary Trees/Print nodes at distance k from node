/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/



public class Solution {

	public static void nodesAtDistanceK(BinaryTreeNode<Integer> root, int node, int k) {
	    //Your code goes here
	int x=	printKDistanceNode(root,node,k);
	}
	private static void printKDistanceNodeFromRoot(BinaryTreeNode<Integer>node,int k)
	{
		if(node==null)
		return;

		if(k==0 && node!=null)
		{
			System.out.println(node.data);
			return;
		}
		printKDistanceNodeFromRoot(node.left,k-1);
		printKDistanceNodeFromRoot(node.right,k-1);
	}


	private  static int printKDistanceNode(BinaryTreeNode<Integer>root,int TARGET,int k)
	{
		if(root==null)
		return-1;

		if(root.data==TARGET)
		{
			printKDistanceNodeFromRoot(root,k);
			return 0;
		}
		int ld=printKDistanceNode(root.left,TARGET,k);
		if(ld!=-1)
		{
			if(ld+1==k)
			System.out.println(root.data);
			else
			printKDistanceNodeFromRoot(root.right,k-ld-2);
			return 1+ld;
		}
		int rd=printKDistanceNode(root.right,TARGET,k);
		if(rd!=-1)
		{
			if(rd+1==k)
			System.out.println(root.data);
			else
			printKDistanceNodeFromRoot(root.left,k-rd-2);
			return 1+rd;
		}
		return -1;
	}

}



// using level order traversal parent child reletionship used as well
import java.util.*;

public class Solution {

    public static BinaryTreeNode<Integer> target(BinaryTreeNode<Integer> root, int node) {
        if (root == null || root.data == node) {
            return root;
        }

        BinaryTreeNode<Integer> leftResult = target(root.left, node);
        if (leftResult != null) {
            return leftResult;
        }

        return target(root.right, node);
    }

    public static void childParent(HashMap<BinaryTreeNode<Integer>, BinaryTreeNode<Integer>> map, BinaryTreeNode<Integer> root) {
        if (root == null) return;

        if (root.left != null) map.put(root.left, root);
        if (root.right != null) map.put(root.right, root);

        childParent(map, root.left);
        childParent(map, root.right);
    }

    public static void nodesAtDistanceK(BinaryTreeNode<Integer> root, int node, int k) {
        if (root == null) return;
        
        // Create a map to store parent-child relationships
        HashMap<BinaryTreeNode<Integer>, BinaryTreeNode<Integer>> map = new HashMap<>();
        childParent(map, root);

        // Find the target node
        BinaryTreeNode<Integer> target = target(root, node);
        if (target == null) return;

        Queue<BinaryTreeNode<Integer>> q = new LinkedList<>();
        HashSet<BinaryTreeNode<Integer>> visited = new HashSet<>();

        // Enqueue the target node
        q.add(target);
        visited.add(target);

      
        while (!q.isEmpty()) {
            int size = q.size();
            if (k==0) {
                // Collect all nodes at distance K
                while (size-- > 0) {
                    BinaryTreeNode<Integer> curr = q.poll();
                    System.out.println(curr.data); // Print the node data
                }
                return;
            }

			
            // Traverse the current level
            while (size-- > 0) {
                BinaryTreeNode<Integer> curr = q.poll();
                if (curr.left != null && visited.add(curr.left)) {
                    q.add(curr.left);
                }
                if (curr.right != null && visited.add(curr.right)) {
                    q.add(curr.right);
                }
                BinaryTreeNode<Integer> parent = map.get(curr);
                if (parent != null && visited.add(parent)) {
                    q.add(parent);
                }
            }
            k--;
        }
    }
}


