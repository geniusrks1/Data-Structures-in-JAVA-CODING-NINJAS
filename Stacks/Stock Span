// using pair class 


import java.util.*;

class Pair{
	int price;
	int span;

	public Pair(int first, int s){
		price=first;
		span=s;
	}
}


public class Solution {

	public static int[] stockSpan(int[] prices) {


       int n = prices.length;
        int[] ans = new int[n];
        Stack<Pair> stack = new Stack<>();

		for(int i=0;i<n;i++){
			if(stack.isEmpty()){
               stack.push(new Pair(prices[i],1));
			   ans[i]=1;
			}

			else{

int count=1;
while( !stack.isEmpty() && stack.peek().price<prices[i]){
Pair p=stack.pop();
count+=p.span;
}

ans[i]=count;
stack.push(new Pair(prices[i],count));

			}
		}

 
     return ans;
	}

}







import java.util.Stack;
import java.util.ArrayList;
public class Solution {

	public static int[] stockSpan(int[] price) {
	int n=price.length;
    int ans[]=new int[n]; 
    Stack<Integer> st= new Stack<>();

st.push(0);
ans[0]=1;

for(int i=1;i<n;i++){
    while(!st.isEmpty() && price[st.peek()]<price[i]){
        st.pop();}
    

    if(st.isEmpty()){
        ans[i]=i+1;}
    
    else{
        ans[i]=i-st.peek();}
    

    st.push(i);
}

return ans;

	}

}

