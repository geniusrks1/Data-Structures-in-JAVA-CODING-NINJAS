import java.util.Stack;
public class Solution {

	public static boolean checkRedundantBrackets(String expression) {

        Stack<Character> st = new Stack<>();
        int n=expression.length();

        for (int i=0;i<n;i++) {
 
            if (expression.charAt(i) == ')') {
                char top = st.pop();
                boolean isRed = true;
 
                while (top != '(') {
                    if (top == '+' || top == '-' || top == '*' || top == '/') {
                        isRed = false;}
                
                    top = st.pop();
                    }
                  
                  if (isRed) {
                    return true;}

                     }
 
               
            else 
                st.push(expression.charAt(i)); 
                          
        }
        return false;
	}
}


///
import java.util.Stack;



public class Solution {

	public static boolean checkRedundantBrackets(String expression) {
	
		Stack<Character> stack =new Stack<>();
		int count = 0;
		for(int i = 0 ; i<expression.length(); i++){
			char c = expression.charAt(i);
		if(c == ')'){
			while(!stack.empty()&& stack.peek()!= '('){
				count = count+1;
				stack.pop();
			}
			if(count==0||count==1){
				return true;
			}
			stack.pop();
			count=0;
			
		}else{
			stack.push(c);
			
		}
			

			
		} 
			return false;
		
	}
}
